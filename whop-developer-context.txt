# Whop Development - Complete Reference Guide

## Quick Reference for AI Agents

### Essential Patterns
```typescript
// Authentication
const { userId } = await verifyUserToken(request.headers);

// User operations
const user = await whopApi.getUser({ userId });
const access = await whopApi.checkIfUserHasAccessToExperience({ userId, experienceId });

// Payments
const charge = await whopApi.createCharge({ amount: 2999, currency: "USD", description: "..." });
const payout = await whopApi.sendPayout({ username: "user", amount: 1000, currency: "USD" });

// Content
const post = await whopApi.withUser(userId).createForumPost({ forumExperienceId, title, content });
const attachment = await whopApi.withUser(userId).uploadMedia({ file: buffer, filename, contentType });

// Notifications
await whopApi.sendNotification({ input: { userId, title: "...", message: "..." } });

// WebSocket
const websocket = whopApi.createWebsocketClient();
websocket.addEventListener('message', handleMessage);
websocket.connect();

// GraphQL
const response = await fetch("https://api.whop.com/public-graphql", {
  method: "POST", headers, body: JSON.stringify({ query, variables })
});
```

### Common Error Pattern
```typescript
try {
  const result = await whopApi.someOperation();
  return { success: true, data: result };
} catch (error) {
  console.error('Operation failed:', error);
  return { success: false, error: error.message };
}
```

### Key TypeScript Interfaces
```typescript
interface CommandContext {
  userId: string;
  feedId: string;
  feedType: "chat_feed" | "forum_feed";
  sendMessage: (params: { feedId: string; message: string; feedType: string }) => Promise<void>;
}

interface CommandResult {
  success: boolean;
  message: string;
  data?: any;
  messageSent: boolean;
  skipWebhook?: boolean;
}

interface UserAccess {
  hasAccess: boolean;
  accessLevel: "admin" | "customer" | "no_access";
}

interface PaymentCharge {
  amount: number; // cents
  currency: "USD";
  description: string;
  metadata?: Record<string, any>;
}
```

---

## Table of Contents
1. [Whop API - Core Functionality](#1-whop-api---core-functionality)
2. [GraphQL Operations](#2-graphql-operations)
3. [Chat Bot Examples](#3-chat-bot-examples)
4. [Web App Development](#4-web-app-development)
5. [Error Handling & Best Practices](#5-error-handling--best-practices)

---

## 1. Whop API - Core Functionality

### Authentication & Setup
```typescript
import { WhopServerSdk, makeUserTokenVerifier } from "@whop/api";

// Server-side SDK initialization
export const whopApi = WhopServerSdk({
  appApiKey: process.env.WHOP_API_KEY,
  onBehalfOfUserId: process.env.WHOP_AGENT_USER_ID,
  companyId: process.env.WHOP_COMPANY_ID,
});

// Token verification for user requests
export const verifyUserToken = makeUserTokenVerifier({
  appId: process.env.WHOP_APP_ID,
  dontThrow: true,
});

// Usage in API routes
const { userId } = await verifyUserToken(headersList);
```

### User Management
```typescript
// Get user information
const user = await whopApi.getUser({ userId });
const { id, name, username, email } = user.publicUser;

// Check user access to specific experience
const accessCheck = await whopApi.checkIfUserHasAccessToExperience({
  userId,
  experienceId,
});
const { hasAccess, accessLevel } = accessCheck.hasAccessToExperience;
// accessLevel options: 'admin' | 'customer' | 'no_access'

// Get user memberships
const memberships = await whopApi.getUserMemberships({ userId });

// Check product ownership
const ownsProduct = await whopApi.checkIfUserOwnsProduct({
  userId,
  productId,
});
```

### Payment System
```typescript
// Create charge (server-side)
const charge = await whopApi.createCharge({
  amount: 2999, // Amount in cents ($29.99)
  currency: "USD",
  description: "Premium subscription",
  metadata: {
    userId: userId,
    productId: "premium_plan"
  }
});

// Send payouts to users
const payout = await whopApi.sendPayout({
  username: "target_username", // Whop username (not user ID)
  amount: 1000, // Amount in cents ($10.00)
  currency: "USD",
  description: "Commission payment",
  metadata: {
    payoutType: "commission",
    period: "2024-01"
  }
});
```

### Forum & Content Management
```typescript
// Find or create a forum experience
const forum = await whopApi.findOrCreateForum({
  name: "General Discussion",
  description: "Main community forum",
  whopId: "your_whop_id",
  isPrivate: false,
  allowComments: true,
  requireApproval: false
});

// Create forum post with advanced features
const post = await whopApi
  .withUser(userId)
  .createForumPost({
    forumExperienceId: forum.experienceId,
    title: "Product Update - New Features Released",
    content: "We're excited to announce several new features...",
    isPinned: true,
    isLocked: false,
    tags: ["announcement", "product-update", "featured"],
    allowComments: true,
    attachments: ["attachment_id_123"], // Media attachments
    metadata: {
      priority: "high",
      category: "announcements"
    }
  });
```

### Media Upload System
```typescript
// Upload media files
const attachment = await whopApi
  .withUser(userId)
  .uploadMedia({
    file: buffer, // File buffer
    filename: file.name,
    contentType: file.type,
    metadata: {
      uploadedBy: userId,
      originalSize: file.size,
      uploadedAt: new Date().toISOString()
    }
  });

// Supported file types: .jpg, .jpeg, .png, .gif, .mp4, .mov, .pdf
// Maximum file size: 100MB
```

### Push Notifications
```typescript
// Send notification to specific user
const notifyUser = await whopApi.sendNotification({
  input: {
    userId: "user_123",
    title: "Welcome to Premium!",
    message: "Your premium membership has been activated.",
    url: "https://yourapp.com/premium" // Optional
  }
});

// Send notification to entire experience/community
const notifyExperience = await whopApi.sendNotification({
  input: {
    experienceId: "exp_456",
    title: "New Feature Available",
    message: "Check out our latest update in the community!",
    // Omit URL to direct users to your app view (recommended)
  }
});

// Check notification success
if (notifyUser.sendNotification) {
  console.log("Notification sent successfully");
}
```

---

## 2. GraphQL Operations

### Endpoint Configuration
```typescript
const endpoint = "https://api.whop.com/public-graphql";
const headers = {
  "Authorization": `Bearer ${WHOP_API_KEY}`,
  "x-on-behalf-of": USER_ID, // Optional: act on behalf of user
  "x-company-id": COMPANY_ID, // Optional: company context
  "Content-Type": "application/json"
};
```

### Message Operations
```typescript
// Send message mutation
const sendMessageMutation = `
  mutation sendMessage($input: SendMessageInput!) {
    sendMessage(input: $input)
  }
`;

const variables = {
  input: {
    feedId: "feed_123",
    feedType: "chat_feed", // or "forum_feed"
    message: "Hello from bot!",
    replyToMessageId: "msg_123" // Optional: reply to specific message
  }
};

const response = await fetch(endpoint, {
  method: "POST",
  headers,
  body: JSON.stringify({
    query: sendMessageMutation,
    variables
  })
});
```

### Data Queries
```typescript
// Get forum posts with pagination
const getForumQuery = `
  query getForumPosts($forumId: ID!, $limit: Int) {
    forumExperience(id: $forumId) {
      posts(first: $limit) {
        edges {
          node {
            id
            title
            content
            createdAt
            isPinned
            isLocked
            tags
            author {
              id
              name
              username
            }
            comments {
              id
              content
              author { id name }
            }
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  }
`;

// Get user information
const getUserQuery = `
  query getUser($userId: ID!) {
    user(id: $userId) {
      id
      name
      username
      email
      profilePicture
      memberships {
        id
        product {
          id
          name
          company { id name }
        }
        validUntil
        createdAt
      }
    }
  }
`;
```

### Forum Post Creation
```typescript
const createForumPostMutation = `
  mutation createForumPost($input: CreateForumPostInput!) {
    createForumPost(input: $input) {
      id
      title
      content
      isPinned
      tags
      createdAt
    }
  }
`;
```

---

## 3. Chat Bot Examples

### Official Whop WebSocket (Client-Side)
```typescript
import { WhopWebsocketProvider, useWhopWebsocket } from "@whop-apps/sdk";

// App wrapper with WebSocket provider
function App() {
  return (
    <WhopWebsocketProvider>
      <ChatComponent />
    </WhopWebsocketProvider>
  );
}

// Component using WebSocket
function ChatComponent() {
  const { websocket, status } = useWhopWebsocket();

  useEffect(() => {
    if (!websocket) return;

    // Message handler
    const handleMessage = (event) => {
      console.log("Received:", event);
      // Process incoming messages
    };
    
    websocket.addEventListener('message', handleMessage);
    websocket.connect();

    return () => {
      websocket.removeEventListener('message', handleMessage);
      websocket.disconnect();
    };
  }, [websocket]);

  // Send message to server
  const sendMessage = () => {
    websocket.broadcast({
      target: "server",
      data: { message: "Hello from client!" }
    });
  };

  return (
    <div>
      <p>Connection Status: {status}</p>
      <button onClick={sendMessage}>Send Message</button>
    </div>
  );
}
```

### Official Whop WebSocket (Server-Side)
```typescript
import { WhopServerSdk } from "@whop/api";

// Initialize SDK
const whopApi = WhopServerSdk({
  appApiKey: process.env.WHOP_API_KEY,
  onBehalfOfUserId: process.env.WHOP_AGENT_USER_ID,
});

// Create WebSocket client
const websocket = whopApi.createWebsocketClient();

// Event handlers
websocket.addEventListener('message', (event) => {
  console.log("Received message:", event);
  
  // Handle different message types
  if (event.type === 'chat_message') {
    handleChatMessage(event.data);
  }
});

websocket.addEventListener('open', () => {
  console.log("WebSocket connected");
});

websocket.addEventListener('close', () => {
  console.log("WebSocket disconnected");
});

// Connect and start listening
websocket.connect();

// Broadcast to connected clients
async function broadcastToClients(data: any) {
  await whopApi.sendWebsocketMessage({
    target: "client",
    data: data
  });
}
```

### AI Integration Bot
```typescript
// AI-powered response generation
async function generateAIResponse(userMessage: string): Promise<string> {
  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: [
        { role: "system", content: "You are a helpful Whop support bot." },
        { role: "user", content: userMessage }
      ],
      max_tokens: 200
    })
  });
  
  const data = await response.json();
  return data.choices[0].message.content;
}

// Command-based bot system
export function parseCommand(raw: string, mentionedUserIds: string[] = []) {
  const parts = raw.toLowerCase().split(/\s+/);
  const command = parts[0].replace("/", "");
  
  switch(command) {
    case "earnings":
      return {
        type: "earnings",
        targetUserId: mentionedUserIds[0] || "self"
      };
    case "whitelist":
      return {
        type: "whitelist", 
        action: parts[1] || "list",
        targetUserId: mentionedUserIds[0]
      };
    default:
      return null;
  }
}
```

---

## 4. Web App Development

### NextJS App Structure
```typescript
// app/layout.tsx - Root layout with Whop theming
import { WhopThemeProvider } from "@whop-apps/sdk";

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        <WhopThemeProvider>{children}</WhopThemeProvider>
      </body>
    </html>
  );
}
```

### Authentication & Access Control
```typescript
// app/experiences/[experienceId]/page.tsx
import { whopApi, verifyUserToken } from "@/lib/whop-api";
import { headers } from "next/headers";

export default async function ExperiencePage({ params }) {
  const headersList = await headers();
  const { experienceId } = await params;
  
  // Verify user authentication
  const { userId } = await verifyUserToken(headersList);
  
  // Check user access to experience
  const accessCheck = await whopApi.checkIfUserHasAccessToExperience({
    userId,
    experienceId,
  });
  
  if (!accessCheck.hasAccessToExperience.hasAccess) {
    return <AccessDeniedComponent />;
  }
  
  // Get user and experience data
  const user = await whopApi.getUser({ userId });
  const experience = await whopApi.getExperience({ experienceId });
  
  return (
    <div>
      <h1>Welcome {user.publicUser.name}</h1>
      <p>Experience: {experience.experience.name}</p>
      <p>Access Level: {accessCheck.hasAccessToExperience.accessLevel}</p>
    </div>
  );
}
```

### Payment Processing
```typescript
// Client-side payment component
import { useWhopApp } from "@whop-apps/sdk";

export default function PremiumPage() {
  const { openPaymentModal } = useWhopApp();
  
  const handlePurchase = async () => {
    // Create charge on server
    const response = await fetch('/api/create-charge', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        amount: 2999, // $29.99
        description: "Premium Plan"
      })
    });
    
    const { chargeId, error } = await response.json();
    
    if (error) {
      alert("Failed to create charge");
      return;
    }
    
    // Open payment modal (recommended approach)
    const result = await openPaymentModal({ chargeId });
    
    if (result.success) {
      // Payment successful - update UI
      window.location.reload();
    }
  };
  
  return (
    <div>
      <h1>Premium Plan</h1>
      <p>Get access to premium features for $29.99/month</p>
      <button onClick={handlePurchase}>
        Subscribe Now
      </button>
    </div>
  );
}
```

### Media Upload Component
```typescript
// Client-side file upload with drag & drop
import { useDropzone } from 'react-dropzone';
import { useState } from 'react';

function MediaUploadComponent() {
  const [uploading, setUploading] = useState(false);
  const [attachmentId, setAttachmentId] = useState(null);

  const onDrop = async (acceptedFiles) => {
    const file = acceptedFiles[0];
    if (!file) return;

    setUploading(true);

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const { attachmentId } = await response.json();
        setAttachmentId(attachmentId);
      }
    } catch (error) {
      console.error('Upload error:', error);
    } finally {
      setUploading(false);
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpg', '.jpeg', '.png', '.gif'],
      'video/*': ['.mp4', '.mov'],
      'application/pdf': ['.pdf']
    },
    maxSize: 100 * 1024 * 1024, // 100MB limit
    multiple: false
  });

  return (
    <div 
      {...getRootProps()} 
      className={`border-2 border-dashed p-6 rounded-lg cursor-pointer
        ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}
      `}
    >
      <input {...getInputProps()} />
      {uploading ? (
        <p>Uploading...</p>
      ) : (
        <p>Drag and drop a file here, or click to select</p>
      )}
      
      {attachmentId && (
        <p className="mt-2 text-green-600">
          Upload successful! ID: {attachmentId}
        </p>
      )}
    </div>
  );
}
```

### API Routes
```typescript
// app/api/create-charge/route.ts - Payment processing
import { whopApi, verifyUserToken } from "@/lib/whop-api";

export async function POST(request: NextRequest) {
  try {
    const { userId } = await verifyUserToken(request.headers);
    const { amount, description } = await request.json();
    
    const charge = await whopApi.createCharge({
      amount,
      currency: "USD",
      description,
      metadata: { userId }
    });
    
    return Response.json({ chargeId: charge.id });
  } catch (error) {
    return Response.json({ error: error.message }, { status: 400 });
  }
}

// app/api/upload/route.ts - File upload handling
export async function POST(request: NextRequest) {
  try {
    const { userId } = await verifyUserToken(request.headers);
    const formData = await request.formData();
    const file = formData.get('file') as File;
    
    if (!file) {
      return Response.json({ error: 'No file provided' }, { status: 400 });
    }

    // Convert to buffer for Whop API
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    const attachment = await whopApi
      .withUser(userId)
      .uploadMedia({
        file: buffer,
        filename: file.name,
        contentType: file.type,
      });

    return Response.json({ 
      attachmentId: attachment.id,
      url: attachment.url 
    });
  } catch (error) {
    return Response.json({ error: 'Upload failed' }, { status: 500 });
  }
}
```

### Environment Configuration
```bash
# .env.local - Required environment variables
WHOP_API_KEY=your_api_key
WHOP_AGENT_USER_ID=agent_user_id
WHOP_COMPANY_ID=company_id
WHOP_APP_ID=app_id
OPENAI_API_KEY=openai_key
NEXT_PUBLIC_BASE_URL=http://localhost:3000
```

### Package Configuration
```json
{
  "scripts": {
    "dev": "whop-proxy --command 'next dev --turbopack'",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@whop-apps/sdk": "0.0.1-canary.111",
    "@whop/api": "^0.0.21-canary.4",
    "next": "15.3.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "ws": "^8.18.2",
    "react-dropzone": "^14.0.0"
  }
}
```

---

## Best Practices & Guidelines

### Security
- Always verify user tokens before processing requests
- Validate file types and sizes for uploads
- Use environment variables for sensitive data
- Implement proper error handling and logging

### Performance
- Use pagination for large data sets
- Implement caching where appropriate
- Optimize images before upload
- Handle WebSocket reconnections gracefully

### User Experience
- Provide immediate feedback for user actions
- Use loading states for async operations
- Implement proper error messages
- Design responsive interfaces

### Development
- Follow TypeScript best practices
- Use proper error boundaries
- Implement comprehensive logging
- Test all user flows thoroughly

---

## 5. Error Handling & Best Practices

### Standard Error Handling Pattern
```typescript
// API route error handling
export async function POST(request: NextRequest) {
  try {
    const { userId } = await verifyUserToken(request.headers);
    const result = await whopApi.someOperation();
    
    return Response.json({ success: true, data: result });
  } catch (error) {
    console.error('API Error:', error);
    return Response.json({ 
      success: false, 
      error: error.message 
    }, { status: 500 });
  }
}

// Command execution error handling
export async function executeCommand(args: any, ctx: CommandContext): Promise<CommandResult> {
  try {
    // Command logic here
    await ctx.sendMessage({
      feedId: ctx.feedId,
      message: "Command executed successfully",
      feedType: ctx.feedType
    });
    
    return {
      success: true,
      message: "Command completed",
      data: { ...args },
      messageSent: true
    };
  } catch (error) {
    console.error('Command error:', error);
    
    return {
      success: false,
      message: error.message,
      messageSent: false,
      skipWebhook: false
    };
  }
}

// WebSocket error handling
websocket.addEventListener('error', (error) => {
  console.error('WebSocket error:', error);
  // Implement reconnection logic
  setTimeout(() => websocket.connect(), 5000);
});

// Payment error handling with user feedback
const handlePayment = async () => {
  try {
    const result = await openPaymentModal({ chargeId });
    if (result.success) {
      showSuccess("Payment successful!");
    } else {
      showError("Payment cancelled or failed");
    }
  } catch (error) {
    console.error('Payment error:', error);
    showError("Payment system unavailable. Please try again.");
  }
};
```

### Validation Patterns
```typescript
// File upload validation
function validateFile(file: File): { valid: boolean; error?: string } {
  const maxSize = 100 * 1024 * 1024; // 100MB
  const allowedTypes = ['image/jpeg', 'image/png', 'video/mp4', 'application/pdf'];
  
  if (!file) {
    return { valid: false, error: 'No file provided' };
  }
  
  if (file.size > maxSize) {
    return { valid: false, error: 'File too large (max 100MB)' };
  }
  
  if (!allowedTypes.includes(file.type)) {
    return { valid: false, error: 'Unsupported file type' };
  }
  
  return { valid: true };
}

// User input validation
function validateAmount(amount: string): { valid: boolean; cents?: number; error?: string } {
  const num = parseFloat(amount);
  
  if (isNaN(num) || num <= 0) {
    return { valid: false, error: 'Invalid amount' };
  }
  
  if (num > 10000) {
    return { valid: false, error: 'Amount too large (max $10,000)' };
  }
  
  return { valid: true, cents: Math.round(num * 100) };
}
```

### Rate Limiting & Retry Logic
```typescript
// Simple rate limiter
class RateLimiter {
  private requests = new Map<string, number[]>();
  
  isAllowed(userId: string, maxRequests = 10, windowMs = 60000): boolean {
    const now = Date.now();
    const userRequests = this.requests.get(userId) || [];
    
    // Remove old requests outside window
    const validRequests = userRequests.filter(time => now - time < windowMs);
    
    if (validRequests.length >= maxRequests) {
      return false;
    }
    
    validRequests.push(now);
    this.requests.set(userId, validRequests);
    return true;
  }
}

// Retry with exponential backoff
async function retryOperation<T>(
  operation: () => Promise<T>,
  maxRetries = 3,
  baseDelay = 1000
): Promise<T> {
  let lastError: Error;
  
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error as Error;
      
      if (attempt === maxRetries) break;
      
      const delay = baseDelay * Math.pow(2, attempt);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw lastError!;
}
```

### Security Best Practices
```typescript
// Input sanitization
function sanitizeInput(input: string): string {
  return input
    .trim()
    .replace(/[<>\"']/g, '') // Remove potentially dangerous characters
    .substring(0, 1000); // Limit length
}

// User authentication middleware
async function authenticateUser(request: NextRequest): Promise<string> {
  try {
    const { userId } = await verifyUserToken(request.headers);
    
    if (!userId) {
      throw new Error('No user ID in token');
    }
    
    return userId;
  } catch (error) {
    throw new Error('Authentication failed');
  }
}

// Permission checking
async function requireAccess(
  userId: string, 
  experienceId: string, 
  requiredLevel: 'customer' | 'admin' = 'customer'
): Promise<void> {
  const access = await whopApi.checkIfUserHasAccessToExperience({
    userId,
    experienceId
  });
  
  if (!access.hasAccessToExperience.hasAccess) {
    throw new Error('Access denied');
  }
  
  if (requiredLevel === 'admin' && access.hasAccessToExperience.accessLevel !== 'admin') {
    throw new Error('Admin access required');
  }
}
```

### Performance Optimization
```typescript
// Caching frequently accessed data
const userCache = new Map<string, { data: any; timestamp: number }>();

async function getCachedUser(userId: string) {
  const cached = userCache.get(userId);
  const cacheTimeout = 5 * 60 * 1000; // 5 minutes
  
  if (cached && Date.now() - cached.timestamp < cacheTimeout) {
    return cached.data;
  }
  
  const user = await whopApi.getUser({ userId });
  userCache.set(userId, { data: user, timestamp: Date.now() });
  
  return user;
}

// Batch operations
async function batchNotifyUsers(userIds: string[], notification: any) {
  const batchSize = 10;
  const results = [];
  
  for (let i = 0; i < userIds.length; i += batchSize) {
    const batch = userIds.slice(i, i + batchSize);
    const batchPromises = batch.map(userId =>
      whopApi.sendNotification({
        input: { userId, ...notification }
      }).catch(error => ({ error, userId }))
    );
    
    const batchResults = await Promise.all(batchPromises);
    results.push(...batchResults);
    
    // Small delay between batches to avoid rate limits
    if (i + batchSize < userIds.length) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }
  
  return results;
}
```

### Development Guidelines

#### Code Organization
- Separate API logic from UI components
- Use TypeScript for type safety
- Implement proper error boundaries
- Create reusable utility functions

#### Testing Approach
- Test API endpoints with different user permissions
- Validate file upload edge cases
- Test WebSocket reconnection scenarios
- Verify payment flow error handling

#### Deployment Checklist
- Set all environment variables
- Configure webhook endpoints
- Test with real Whop accounts
- Monitor error logs and performance
- Implement health checks

#### Common Gotchas
- Always use `withUser(userId)` for user-specific operations
- Remember amounts are in cents, not dollars
- WebSocket requires Node.js 22.4+ or Bun
- File uploads need Buffer conversion for server-side
- Notification URLs are optional (omit for app view)

---

*This reference provides everything needed to build production-ready Whop applications with proper error handling, security, and performance optimization.*